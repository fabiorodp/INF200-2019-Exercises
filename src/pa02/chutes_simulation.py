# -*- coding: utf-8 -*-
from snakes import Board, Player, ResilientPlayer, LazyPlayer
import random as rd

__author__ = "FÃ¡bio Rodrigues Pereira and Rabin Senchuri"
__email__ = "faro@nmbu.no and rase@nmbu.no"


class Simulation:
    def __init__(self, player_field, board=None, seed=123456,
                 randomize_players=False):
        """the Simulation constructor receives:
        - a random seed to seed the random number generator;
        - a boolean flag indicating whether the order or players should
        be randomized before the start of each game played;
        - a list of player classes: for each game, a list of player
        objects will be created, one player for each entry in the list"""
        self.seed = rd.seed(seed)
        if randomize_players:
            rd.shuffle(player_field)
        self.board = board if board else Board()
        # List of player classes
        self.player_field = player_field
        self.player_types = [p.__name__ for p in player_field]
        self.results = []

    def single_game(self):
        """runs a single game returning a tuple consisting of the number
        of moves made and the type of the winner, e.g.
        (25, 'LazyPlayer')"""
        players = [player(self.board) for player in self.player_field]
        while True:
            for player in players:
                player.move()
                if self.board.goal_reached(player.position):
                    return player.num_moves, type(player)

    def run_simulation(self, num_games):
        """runs a given number of games and stores the results in the
        Simulation object. It returns nothing"""
        self.results = [self.single_game() for _ in range(num_games)]
        return self.results

    def get_results(self):
        """returns all results generated by run_simulation() calls so
        far as a list of result tuples, e.g., [(10, 'Player'),
        (6, 'ResilientPlayer')]"""
        return self.results

    def winners_per_type(self):
        """returns a dictionary mapping player types to the number of
        wins, e.g., {'Player': 4, 'LazyPlayer':
        2, 'ResilientPlayer': 5}"""
        winner_types = list(zip(*self.results))[1]
        return {player_type: winner_types.count(player_type)
                for player_type in self.player_types}

    def durations_per_type(self):
        """returns a dictionary mapping player types to lists of game
        durations for that type, e.g., {'Player': [11, 25, 13],
        'LazyPlayer': [39], 'ResilientPlayer': [8, 7, 6, 11]}"""
        return {
            player_type: [d for d, t in self.results if t == player_type]
            for player_type in self.player_types}

    def players_per_type(self):
        """returns a dictionary showing how many players of each type
        participate, e.g., {'Player': 3, 'LazyPlayer':
        1, 'ResilientPlayer': 0}"""
        return {player_type.__name__: self.player_field.count(
            player_type) for player_type in self.player_field}
