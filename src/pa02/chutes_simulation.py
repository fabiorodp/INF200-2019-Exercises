# -*- coding: utf-8 -*-
from snakes import Board, Player, ResilientPlayer, LazyPlayer
import random as rd

__author__ = "FÃ¡bio Rodrigues Pereira and Rabin Senchuri"
__email__ = "faro@nmbu.no and rase@nmbu.no"


class Simulation:
    def __init__(self, player_field, board=None, seed=123456,
                 randomize_players=False):
        """the Simulation constructor receives:
        - a random seed to seed the random number generator;
        - a boolean flag indicating whether the order or players should
        be randomized before the start of each game played;
        - a list of player classes: for each game, a list of player
        objects will be created, one player for each entry in the list"""
        self.seed = rd.seed(seed)
        self.board = Board() if board is None else board
        if randomize_players:
            rd.shuffle(player_field)
        # list of players with the object class called
        self.player = [player() for player in player_field]
        # List of stored results divided by tuples
        self.results = []

    def single_game(self):
        """runs a single game returning a tuple consisting of the number
        of moves made and the type of the winner, e.g.
        (25, 'LazyPlayer')"""
        while True:
            for player in self.player:
                player.move()
                if self.board.goal_reached(player.position):
                    return player.num_moves, type(player).__name__

    def run_simulation(self, num_games):
        """runs a given number of games and stores the results in the
        Simulation object. It returns nothing"""
        for _ in range(num_games):
            self.results.append(self.single_game())

    def get_results(self):
        """returns all results generated by run_simulation() calls so
        far as a list of result tuples, e.g., [(10, 'Player'),
        (6, 'ResilientPlayer')]"""
        return self.results

    def winners_per_type(self):
        """returns a dictionary mapping player types to the number of
        wins, e.g., {'Player': 4, 'LazyPlayer':
        2, 'ResilientPlayer': 5}"""
        winner_types = list(zip(*self.results))[1]
        return {type(p).__name__: winner_types.count(type(p).__name__)
                for p in self.player}

    def durations_per_type(self):
        """returns a dictionary mapping player types to lists of game
        durations for that type, e.g., {'Player': [11, 25, 13],
        'LazyPlayer': [39], 'ResilientPlayer': [8, 7, 6, 11]}"""
        return {type(p).__name__:
                [d for d, t in self.results if t == type(p).__name__]
                for p in self.player}

    def players_per_type(self):
        """returns a dictionary showing how many players of each type
        participate, e.g., {'Player': 3, 'LazyPlayer':
        1, 'ResilientPlayer': 0}"""
        return {type(p).__name__: self.player.count(p) for p in
                self.player}
